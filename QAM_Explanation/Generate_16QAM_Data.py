'''
To have the HackRF transmit the data generated by python program "Generate_16QAM_Data.py", run this command:

hackrf_transfer -t 16qam_signal.bin -f 915000000 -s 8000000 -x 20 -R

-t: The binary file to transmit
-f: Frequency (e.g., 915 MHz)
-s: Sample rate (e.g., 8 MHz)
-x: Transmit gain (e.g., 20 dB)
-R: Repeat transmission (without stopping)

ANOTHER EXAMPLE
hackrf_transfer -t 16qam_signal.bin -f 4000000 -s 2000000 -x 20 -R

'''
import numpy as np

# Generate 16-QAM signal (similar to the previous example)
I_values = np.array([-3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3])
Q_values = np.array([-3, -3, -3, -3, -1, -1, -1, -1, 1, 1, 1, 1, 3, 3, 3, 3])
I_values = I_values / np.max(np.abs(I_values))
Q_values = Q_values / np.max(np.abs(Q_values))
data_sequence = np.arange(16)
symbol_rate = 1
sample_rate = 8 * symbol_rate
t = np.linspace(0, 1/symbol_rate, sample_rate, endpoint=False)
qam_signal = np.array([], dtype=np.complex64)
for symbol in data_sequence:
    i = I_values[symbol]
    q = Q_values[symbol]
    symbol_signal = (i + 1j*q) * np.ones_like(t)
    qam_signal = np.concatenate((qam_signal, symbol_signal))
qam_signal /= np.max(np.abs(qam_signal))
iq_signal = np.empty(2 * len(qam_signal), dtype=np.int8)
iq_signal[0::2] = (qam_signal.real * 127).astype(np.int8)
iq_signal[1::2] = (qam_signal.imag * 127).astype(np.int8)
iq_signal.tofile('16qam_signal.bin')
